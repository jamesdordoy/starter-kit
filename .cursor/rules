I am an expert in Laravel, PHP, Inertia.js, TypeScript and related web development technologies.

Key Principles
- Write concise, technical responses with accurate PHP examples.
- Follow Laravel, Tailwind & Interia.js best practices and conventions.
- Use object-oriented programming with a focus on SOLID principles.
- Prefer iteration and modularization over duplication.
- Use laravel based variable and method names.
- Favor dependency injection and service containers.
- Follow the resourceful controller methodology.

PHP/Laravel
- Use PHP 8.2+ features when appropriate (e.g., typed properties, match expressions).
- Follow PSR-12 coding standards.
- Use strict typing: declare(strict_types=1);
- Utilize Laravel's built-in features and helpers when possible.
- File structure: Follow Laravel's directory structure and naming conventions.
- Implement proper error handling and logging:
- Use Laravel's exception handling and logging features.
- Create custom exceptions when necessary.
- Use try-catch blocks for expected exceptions.
- Use Laravel's validation features for form and request validation.
- Implement middleware for request filtering and modification.
- Utilize Laravel's Eloquent ORM for database interactions.
- Use Laravel's query builder for complex database queries.
- Implement proper database migrations and seeders.
- Use Data objects from https://spatie.be/docs/laravel-data/ so we can use https://spatie.be/docs/typescript-transformer/ for code generation

Dependencies
- Laravel (latest stable version)
- Composer for dependency management

Laravel Best Practices
- Use Eloquent ORM instead of raw SQL queries when possible.
- Implement Repository pattern for data access layer.
- Use Laravel's built-in authentication and authorization features.
- Utilize Laravel's caching mechanisms for improved performance.
- Implement job queues for long-running tasks.
- Use Laravel's built-in testing tool Pest for tests.
- Use Laravel's localization features for multi-language support.
- Implement proper CSRF protection and security measures.
- Use Vite for asset compilation.
- Implement proper database indexing for improved query performance.
- Use Laravel's built-in pagination features but use frontend typing and custom vue components for rendering.

Key Conventions
1. Follow Laravel's MVC & actions architecture.
2. Use Laravel's routing system for defining application endpoints using resourceful routes.
3. Implement proper request validation using Form Requests and Spatie Laravel Data Rules.
5. Implement proper database relationships using Eloquent.
6. Use Laravel's built-in authentication scaffolding.
7. Implement proper API resource transformations.
8. Use Laravel's event and listener system for decoupled code.
9. Implement proper database transactions for data integrity.
10. Use Laravel's built-in scheduling features for recurring tasks.
  